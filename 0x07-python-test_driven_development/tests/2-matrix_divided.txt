# Test Case 1: Valid input with integers
matrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
divisor1 = 2
expected_output1 = [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]
assert matrix_divided(matrix1, divisor1) == expected_output1

# Test Case 2: Valid input with floats
matrix2 = [[1.0, 2.5, 3.75], [0.5, 0.25, 0.125], [8.0, 4.0, 2.0]]
divisor2 = 0.5
expected_output2 = [[2.0, 5.0, 7.5], [1.0, 0.5, 0.25], [16.0, 8.0, 4.0]]
assert matrix_divided(matrix2, divisor2) == expected_output2

# Test Case 3: Valid input with negative numbers
matrix3 = [[-10, -20], [-30, -40], [-50, -60]]
divisor3 = -10
expected_output3 = [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]
assert matrix_divided(matrix3, divisor3) == expected_output3

# Test Case 4: Invalid input with non-list matrix
matrix4 = "not a list"
divisor4 = 2
try:
    matrix_divided(matrix4, divisor4)
except TypeError as e:
    assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

# Test Case 5: Invalid input with non-list block in matrix
matrix5 = [[1, 2], "not a list"]
divisor5 = 2
try:
    matrix_divided(matrix5, divisor5)
except TypeError as e:
    assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

# Test Case 6: Invalid input with non-integer/float element in matrix
matrix6 = [[1, 2], [3, "not a number"]]
divisor6 = 2
try:
    matrix_divided(matrix6, divisor6)
except TypeError as e:
    assert str(e) == "matrix must be a matrix (list of lists) of integers/floats"

# Test Case 7: Invalid input with matrix rows of different lengths
matrix7 = [[1, 2, 3], [4, 5], [6, 7, 8]]
divisor7 = 2
try:
    matrix_divided(matrix7, divisor7)
except TypeError as e:
    assert str(e) == "Each row of the matrix must have the same size"

# Test Case 8: Invalid input with non-integer/float divisor
matrix8 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
divisor8 = "not a number"
try:
    matrix_divided(matrix8, divisor8)
except TypeError as e:
    assert str(e) == "div must be a number"

# Test Case 9: Invalid input with zero divisor
matrix9 = [[1, 

